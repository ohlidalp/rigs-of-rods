{
    "nodes": [
        {
            "pos_x": 69.0,
            "pos_y": 154.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 0.0,
            "user_size_y": 0.0,
            "id": 0,
            "type_id": 1,
            "softbody_node_id": 6
        },
        {
            "pos_x": 261.0,
            "pos_y": 132.0,
            "arranged_pos_x": -2.0,
            "arranged_pos_y": -2.0,
            "user_size_x": 248.0,
            "user_size_y": 380.0,
            "id": 1,
            "type_id": 4,
            "source_code": "float smX = 0.f;\nfloat smY = 0.f;\nfloat smFACTOR=0.15;\n\nvoid step() {\n    // Pass-thru\n    Write(0,Read(0,0));\n    Write(1,Read(1,0));\n\n //  Write(7, Smooth100(0,0));\n //  Write(8, Smooth100(1,0));\n\n  // Write(7, SmoothN(0,200));\n  // Write(8, SmoothN(1,200));\n\n  smX = SmoothEWMA(\n        Read(0,0),smX,smFACTOR);\n  smY = SmoothEWMA(\n        Read(1,0),smY,smFACTOR);\n\n  Write(7,smX);\n  Write(8,smY);\n}"
        },
        {
            "pos_x": 579.0,
            "pos_y": 554.0,
            "arranged_pos_x": 65.0,
            "arranged_pos_y": 444.0,
            "user_size_x": 436.0,
            "user_size_y": 338.0,
            "id": 2,
            "type_id": 8,
            "zoom": 300.0,
            "grid_size": 0.20000000298023225
        },
        {
            "pos_x": 581.0,
            "pos_y": 112.0,
            "arranged_pos_x": 65.0,
            "arranged_pos_y": 88.0,
            "user_size_x": 436.0,
            "user_size_y": 350.0,
            "id": 3,
            "type_id": 8,
            "zoom": 8000.0,
            "grid_size": 0.03999999910593033
        }
    ],
    "links": [
        {
            "node_src_id": 0,
            "node_dst_id": 1,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 0,
            "node_dst_id": 1,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 1,
            "node_dst_id": 2,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 1,
            "node_dst_id": 2,
            "slot_src": 7,
            "slot_dst": 4
        },
        {
            "node_src_id": 1,
            "node_dst_id": 2,
            "slot_src": 8,
            "slot_dst": 5
        },
        {
            "node_src_id": 1,
            "node_dst_id": 3,
            "slot_src": 0,
            "slot_dst": 0
        },
        {
            "node_src_id": 1,
            "node_dst_id": 3,
            "slot_src": 1,
            "slot_dst": 1
        },
        {
            "node_src_id": 1,
            "node_dst_id": 3,
            "slot_src": 7,
            "slot_dst": 4
        },
        {
            "node_src_id": 1,
            "node_dst_id": 3,
            "slot_src": 8,
            "slot_dst": 5
        },
        {
            "node_src_id": 1,
            "node_dst_id": 2,
            "slot_src": 0,
            "slot_dst": 0
        }
    ],
    "udp_pos_node": {
        "pos_x": -300.0,
        "pos_y": 100.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483646,
        "type_id": 7
    },
    "udp_acc_node": {
        "pos_x": -300.0,
        "pos_y": 300.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483644,
        "type_id": 7
    },
    "udp_orient_node": {
        "pos_x": -300.0,
        "pos_y": 400.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483643,
        "type_id": 7
    },
    "udp_velo_node": {
        "pos_x": -300.0,
        "pos_y": 200.0,
        "arranged_pos_x": -2.0,
        "arranged_pos_y": -2.0,
        "user_size_x": 0.0,
        "user_size_y": 0.0,
        "id": -2147483645,
        "type_id": 7
    },
    "shared_script": "\nfloat Smooth5(int slot, int offs)\n{\n   return (Read(slot,offs)+Read(slot,offs-1)\n     +Read(slot,offs-2)+Read(slot,offs-3)\n     +Read(slot,offs-4))    /5.f;\n}\n\nfloat Smooth25(int slot, int offs)\n{\n    return (Smooth5(slot,offs)+Smooth5(slot,offs-5)\n    +Smooth5(slot,offs-10)+Smooth5(slot,offs-15)\n    +Smooth5(slot,offs-20)) / 5.f;\n}\n\nfloat Smooth100(int slot, int offs)\n{\n   return (Smooth25(slot,offs)+Smooth25(slot,offs-25)\n     +Smooth25(slot,offs-50)+Smooth25(slot,offs-75))/4.f;\n}\n\nfloat SmoothN(int slot, int count)\n{\n    float total=0.f;\n    for (int i=0; i< count; ++i) {\n       total += Read(slot, -i);\n    }\n    return total/float(count);\n}\n\nfloat SmoothEWMA(float cur, float prev, float factor)\n{\n    return (factor*cur) + ((1-factor)*prev);\n}"
}